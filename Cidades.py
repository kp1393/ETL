{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "import json\n",
    "import gspread\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "class cidades():\n",
    "\n",
    "# O método 'pesquisa' tem como objetivo auxiliar na busca pelo código IBGE a partir do nome da cidade    \n",
    "    \n",
    "    def pesquisa():\n",
    "        lista= []\n",
    "        r=requests.get(\"http://servicodados.ibge.gov.br/api/v1/localidades/municipios\")\n",
    "\n",
    "        arquivo_json = json.loads(r.text)\n",
    "    \n",
    "        cidade = str(input(\"Digite o nome da cidade: \"))\n",
    "    \n",
    "        for i in range(0,len(arquivo_json)):\n",
    "            if cidade.upper() in arquivo_json[i]['nome'].upper():\n",
    "                nome_cidade = arquivo_json[i]['nome']\n",
    "                uf = arquivo_json[i]['microrregiao']['mesorregiao']['UF']['sigla']\n",
    "                codigo_ibge = arquivo_json[i]['id']\n",
    "            \n",
    "                lista.append((nome_cidade,uf,codigo_ibge))\n",
    "    \n",
    "        return(lista)\n",
    "\n",
    "\n",
    "\n",
    "# O método \"dados_auxiliar\" tem como objetivo fazer a requisição no site do IBGE e buscar as informações e retornar os dados em forma de string e de lista\n",
    "# -História,Gentílico,Região,População,Renda e Escolaridade\n",
    "\n",
    "    def dados_auxiliar(codigo_ibge):\n",
    "            \n",
    "        try:        \n",
    "            dados_1=requests.get(\"https://servicodados.ibge.gov.br/api/v1/biblioteca?aspas=3&codmun=\"+str(codigo_ibge)).json()          \n",
    "            dados_2=requests.get(\"https://servicodados.ibge.gov.br/api/v1/pesquisas/indicadores/25207/resultados/\"+str(codigo_ibge)).json()\n",
    "            dados_3=requests.get('https://servicodados.ibge.gov.br/api/v1/localidades/municipios/'+str(codigo_ibge)).json()\n",
    "            dados_4=requests.get('https://servicodados.ibge.gov.br/api/v1/pesquisas/indicadores/47001/resultados/'+str(codigo_ibge)).json()\n",
    "            dados_5=requests.get('https://servicodados.ibge.gov.br/api/v1/pesquisas/indicadores/60045/resultados/'+str(codigo_ibge)).json()\n",
    "            \n",
    "            \n",
    "            try:\n",
    "                nome = dados_1[str(codigo_ibge)]['MUNICIPIO']\n",
    "            except:\n",
    "                nome = \"Nome da cidade não encontrada\"            \n",
    "            try:\n",
    "                historia = dados_1[str(codigo_ibge)]['HISTORICO']\n",
    "            except:\n",
    "                historia = \"História não encontrada\"\n",
    "            try:\n",
    "                gentilico = dados_1[str(codigo_ibge)]['GENTILICO']\n",
    "            except:\n",
    "                gentilico = \"Gentilico não encontrado\"\n",
    "            try:       \n",
    "                populacao = dados_2[0]['res'][0]['res']['2010'] \n",
    "            except:\n",
    "                populacao=\"População não encontrada\"\n",
    "            try:\n",
    "                microrregiao = dados_3['microrregiao']['nome']\n",
    "            except:\n",
    "                microrregiao=\"Microrregião não encontrada\"\n",
    "            try:\n",
    "                mesorregiao = dados_3['microrregiao']['mesorregiao']['nome']\n",
    "            except:\n",
    "                mesorregiao=\"Mesorregião não encontrada\"\n",
    "            try:\n",
    "                uf = dados_3['microrregiao']['mesorregiao']['UF']['sigla'] \n",
    "            except:\n",
    "                uf = \"UF não encontrada\"\n",
    "            try:\n",
    "                pib_per_capta = dados_4[0]['res'][0]['res']['2019']\n",
    "            except:\n",
    "                pib_per_capta=\"PIB er capta não encontrado\"\n",
    "            try:\n",
    "                escolarizacao = dados_5[0]['res'][0]['res']['2010']    \n",
    "            except:\n",
    "                \"Escolarização não encontrada\"\n",
    "        \n",
    "            string = 'Cidade:'+nome+'\\n\\nHistória da cidade: '+historia+\"\\n\\nGentílico:\"+gentilico+\"\\n\\nPopulação:\"+populacao+\" habitantes\"+\"\\n\\nUF:\"+uf+\"\\nMesorregião:\"+mesorregiao+\"\\nMicrorregião:\"+microrregiao+\"\\n\\nPIB per capta: (R$) \"+pib_per_capta+\"\\n\\nTaxa de escolarização (6 a 14 anos): \"+escolarizacao+\" %\"\n",
    "            \n",
    "            conjunto = [nome,historia,gentilico,populacao,microrregiao,mesorregiao,uf,pib_per_capta,escolarizacao]\n",
    "        except:\n",
    "            string = \"Erro 404. Verifique o código \"+codigo_ibge\n",
    "            conjunto=[]\n",
    "            \n",
    "        return string, conjunto\n",
    " \n",
    "\n",
    "\n",
    "    def dados(codigo_ibge):\n",
    "        \n",
    "        if len(str(codigo_ibge))==7:\n",
    "            \n",
    "            info, lista = cidades.dados_auxiliar(codigo_ibge)\n",
    "            \n",
    "        else:\n",
    "            info=\"Cidade não encontrada! Verifique o código \"+codigo_ibge\n",
    "        \n",
    "        return(info)\n",
    "        \n",
    "    \n",
    "# O método \"dados_planilha\" tem como objetivo escrever na planilha online os dados pesquisados no site do IBGE\n",
    "\n",
    "    def dados_planilha():\n",
    "        lista_geral=[]\n",
    "        \n",
    "        # Autenticação\n",
    "        gc = gspread.service_account(filename='projeto-napp-f881b2552721.json')\n",
    "        #Abrir a planilha pela ID\n",
    "        planilha = gc.open_by_key('18tOEpFhxAhtnYjEmEKyMcCj8X6nrf_4oal29Q13AmO8')\n",
    "        #ler a lista de códigos do IBGE da planilha\n",
    "        codigos = planilha.worksheet('Dados').col_values(1)\n",
    "        \n",
    "        # Laço para fazer a requisção das informações por meio do método dados_auxiliar\n",
    "        for i in range(1,len(codigos)):\n",
    "            \n",
    "            if len(str(codigos[i]))==7:\n",
    "                info, lista = cidades.dados_auxiliar(codigos[i])\n",
    "            \n",
    "                lista_geral.append(lista)\n",
    "            \n",
    "                print(info)\n",
    "                print(\"\\n\")\n",
    "                print(\"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\")\n",
    "            else:\n",
    "                lista=[]\n",
    "                lista_geral.append(lista)\n",
    "                print(\"Cidade não encontrada! Verifique o código \", codigos[i])\n",
    "       \n",
    "        array = np.array(lista_geral)\n",
    "\n",
    "        # Escreve os dados na planilha de destino\n",
    "        planilha.worksheet('Dados').update('B2', array.tolist())\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
